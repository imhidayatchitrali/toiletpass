rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    // Règles pour les paiements
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Règles pour les intentions de paiement
    match /paymentIntents/{intentId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Règles pour les réservations
    match /reservations/{reservationId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.establishmentOwnerId);
      allow create: if isAuthenticated() && request.resource.data.status == 'pending';
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.establishmentOwnerId) &&
        (request.resource.data.status in ['validated', 'completed', 'cancelled']);
    }

    // Règles pour les transactions
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.establishmentOwnerId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.amount > 0;
      allow update, delete: if false;
    }

    // Règles pour les établissements
    match /establishments/{establishmentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Règles pour les wallets
    match /wallets/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Règles pour les webhooks
    match /webhookEvents/{eventId} {
      allow write: if request.auth == null;
    }

    // Règles pour les produits Stripe
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        (request.auth.uid == resource.data.ownerId || 
         get(/databases/$(database)/documents/establishments/$(resource.data.establishmentId)).data.ownerId == request.auth.uid);
    }

    // Règles pour les prix Stripe
    match /prices/{priceId} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        (request.auth.uid == resource.data.ownerId || 
         get(/databases/$(database)/documents/establishments/$(resource.data.establishmentId)).data.ownerId == request.auth.uid);
    }

    // Règles pour les utilisateurs
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Règles pour les statistiques
    match /stats/{establishmentId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == establishmentId || 
         get(/databases/$(database)/documents/establishments/$(establishmentId)).data.ownerId == request.auth.uid);
      allow write: if isAuthenticated() && 
        (request.auth.uid == establishmentId || 
         get(/databases/$(database)/documents/establishments/$(establishmentId)).data.ownerId == request.auth.uid);
    }

    // Règles pour les emails
    match /mail/{mailId} {
      allow read: if false;
      allow create: if isAuthenticated();
    }

    // Règles pour les évaluations des toilettes
    match /toiletRatings/{toiletId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId ||
         get(/databases/$(database)/documents/establishments/$(toiletId)).data.ownerId == request.auth.uid);
      
      match /ratings/{ratingId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
    }
  }
}